{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","for","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","background","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","class","role","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b6ab2952.chunk.js","sourcesContent":["import React from 'react'\r\nimport propTypes from 'prop-types';\r\nimport { a } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n        </li> */}\r\n       \r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n    </div>\r\n\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </>\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: propTypes.string.isRequired,\r\n    aboutText: propTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title: 'set title here',\r\n    aboutText: 'About'\r\n}","import React , {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"uppercase was clicked:\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted To UpperCase\",\"success\");\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        console.log(\"LowerCase was clicked: \" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted To LowerCase\",\"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"clear\",\"success\");\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"cpoied to clipboard\",\"success\");\r\n        \r\n    }\r\n\r\n    \r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Remove\",\"success\");\r\n        \r\n    }\r\n\r\n    \r\n   \r\n\r\n    const handleOnChange = (event) => {\r\n        console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text,setText] = useState('');\r\n    // text= \"new text\"; //wrong way to change the the state\r\n   //setText(\"new text\"); //correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}} >\r\n           <h1>{props.heading}</h1> \r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{background: props.mode==='dark'?'grey':'white' , color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                <button className=\"btn btn-primary my-3\" onClick={handleUpClick}>Convert To UpperCase</button>\r\n                <button className=\"btn btn-primary my-3 mx-3\" onClick={handleLowClick}>Convert To LowerCase</button>\r\n                <button className=\"btn btn-primary my-3 mx-3\" onClick={handleClearClick}>Clear</button>\r\n                <button className=\"btn btn-primary my-3 mx-3\" onClick={handleCopyClick}>Copy</button>\r\n                <button className=\"btn btn-primary my-3 mx-3\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                \r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h1>your text summary</h1>\r\n            <p><b>{text.split(\" \").length} words and {text.length} character</b></p>\r\n            <p><b>{0.008 * text.split(\" \").length }Minutes read</b></p>\r\n            <h1>Preview</h1>\r\n            <p>{text.length>0?text:\"Enter something to preview it here\"}</p>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n    }\r\n    return (\r\n        props.alert &&  <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong> {capitalize(props.alert.type)} </strong> : {props.alert.msg}\r\n        \r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport  Navbar  from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n\n  }\n  const toggleMode = () =>{\n   if(mode === 'light'){\n    setMode('dark');\n    document.body.style.backgroundColor = '#042743';\n    showAlert(\"Dark Mode has been enabled\",\"success\")\n    document.title = 'TextUtils - Dark Mode';\n    // setInterval(() => {\n    //   document.title = 'TextUtils is amazing mode';\n    // }, 2000);\n    // setInterval(() => {\n    //   document.title = 'Install TextUtils Now';\n    // }, 1500);\n   }\n   else {\n     setMode('light');\n     document.body.style.backgroundColor = 'white';\n     showAlert(\"Light Mode has been enabled\",\"success\")\n     document.title = 'TextUtils -Light Mode';\n   }\n  }\n\n  return (\n    <>\n\n{/* <Navbar title=\"TextUtils\" aboutText=\"About us\"/> */}\n{/* <Navbar/> */}\n{/* <Router> */}\n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n<Alert alert= {alert} />\n<div className=\"container my-3\">\n{/* <Switch> */}\n      {/* /users --> component 1\n      /users/home --> component2 */}\n          {/* <Route path=\"/about\">\n            <About />\n          </Route> */}\n          \n          {/* <Route path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to Analyze below\" mode={mode} />\n          {/* </Route> */}\n{/* </Switch> */}\n</div>\n{/* </Router> */}\n </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}